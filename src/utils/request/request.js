import { logInfo, logError } from "../log/log";

const xFlorenceHeaderKey = "X-Florence-Token";
const authHeaderKey = "Authorization";
const bearerPrefix = "Bearer ";

/**
 * @param {string} authToken - user auth token obtained from access_token cookie
 * @return {array} headers array or empty array
 */
const setHeaders = (authToken) => {
    if (!authToken) {
        return [];
    }
    const headers = new Headers();
    headers.set(xFlorenceHeaderKey, authToken);
    headers.set(authHeaderKey, authToken);
    return headers;
};

// work in progress/place holder request func
const request = async (cfg, url, method, body) => {
    const startedAt = new Date(Date.now()).toISOString();
    logInfo("http request started", null, { requestID: "", method: method, path: url, statusCode: 0, startedAt: startedAt, endedAt: null });

    const headers = setHeaders(cfg.authToken);
    const fetchConfig = {
        method,
        headers
    };

    if (method === "POST" || method === "PUT") {
        fetchConfig.body = JSON.stringify(body || {});
        fetchConfig.headers.append("Content-Type", "application/json");
    }

    const response = await fetch(cfg.baseURL + url, fetchConfig);

    if (response.status >= 400) {
        logError("http request failed", { error: response }, { requestID: "", method: method, path: url, statusCode: response.status, startedAt, endedAt: null });
        response.errorMessage = await response.text();
        return response;
    }
    const json = await response.json();

    const endedAt = new Date(Date.now()).toISOString();
    logInfo("http request completed", null, { requestID: "", method: method, path: url, statusCode: response.status, startedAt, endedAt: endedAt });
    return json;
};

/**
 * @param {function} cookies - NextJS cookies getter function
 * @return {object} response config object contain base url and authorisation values
 */
const SSRequestConfig = async (cookies) => {
    const baseURL = process.env.API_ROUTER_URL;
    const cookieStore = await cookies();
    const authToken = cookieStore.get("access_token");
    const cleanAuthToken = authToken.value.replace(/"/g, "");
    return { baseURL: baseURL, authToken: cleanAuthToken };
};

/**
 * @param {object} appConfig - appCongfg object, see: utils/config
 * @return {object} response config object contain base url and authorisation values
 */
const CSRequestConfig = (appConfig) => {
    const cookies = document.cookie.split(";");
    let authToken;
    cookies.forEach(cookie => {
        const c = cookie.split("=");
        if (c[0] == "id_token") { authToken = bearerPrefix + c[1]; }
    });
    return { baseURL: appConfig.apiRouterURL, authToken: authToken };
};

/**
 * @param {object} cfg - request config object generated by SSRequestConfig function
 * @param {string} url - relative path to api router
 * @return {Promise} fetch response body in JSON format
 */
const httpGet = (cfg, url) => {
    return request(cfg, url, "GET");
};

/**
 * @param {object} cfg - request config object generated by SSRequestConfig function
 * @param {string} url - relative path to api router
 * @param {object} body - body contents of request
 * @return {Promise} fetch response body in JSON format
 */
const httpPost = (cfg, url, body) => {
    return request(cfg, url, "POST", body);
};

/**
 * @param {object} cfg - request config object generated by SSRequestConfig function
 * @param {string} url - relative path to api router
 * @param {object} body - body contents of request
 * @return {Promise} fetch response body in JSON format
 */
const httpPut = (cfg, url, body) => {
    return request(cfg, url, "PUT", body);
};

/**
 * @param {object} cfg - request config object generated by SSRequestConfig function
 * @param {string} url - relative path to api router
 * @return {Promise} fetch response body in JSON format
 */
const httpDelete = (cfg, url) => {
    return request(cfg, url, "DELETE");
};

export { httpGet, httpPost, httpPut, httpDelete, SSRequestConfig, CSRequestConfig };
